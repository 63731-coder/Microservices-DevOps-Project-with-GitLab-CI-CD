stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  ACR_NAME: scenarioregistry63731
  ACR_LOGIN_SERVER: scenarioregistry63731.azurecr.io
  IMAGE_PYTHON: "$ACR_LOGIN_SERVER/63731-service-python:latest"
  IMAGE_JAVA: "$ACR_LOGIN_SERVER/63731-service-java:latest"

#######################
# üì¶ BUILD SERVICES
#######################

build-flask:
  stage: build
  image: mcr.microsoft.com/devcontainers/python:0-3.11
  script:
    - cd service-python
    - pip install -r requirements.txt
    - echo "‚úÖ Flask service built."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

build-springboot:
  stage: build
  image: maven:3.9.3-eclipse-temurin-17
  script:
    - cd service-java
    - mvn clean install
    - echo "‚úÖ Spring Boot service built."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

#######################
# ‚úÖ TEST SERVICES
#######################

test-flask:
  stage: test
  image: mcr.microsoft.com/devcontainers/python:0-3.11
  before_script:
    - apt-get update && apt-get install -y gcc python3-dev build-essential
    - cd service-python
    - pip install -r requirements.txt
  script:
    - python -m unittest test_app.py
    - echo "Flask tests completed."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

test-springboot:
  stage: test
  image: maven:3.9.3-eclipse-temurin-17
  script:
    - cd service-java
    - mvn test
    - echo "‚úÖ Spring Boot tests completed."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

#######################
# üöÄ DEPLOY TO AZURE
#######################

terraform-apply:
  stage: deploy
  image:
    name: hashicorp/terraform:1.7.5
    entrypoint: [""]
  before_script:
    - cd terraform
  script:
    - terraform init
    - terraform validate
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'


deploy:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - apk add --no-cache bash curl py3-pip
    - pip install azure-cli
    - az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID"
    - az account set --subscription "$ARM_SUBSCRIPTION_ID"
  script:
    # üîß Build & push Docker images
    - docker build -t $IMAGE_PYTHON ./service-python
    - docker build -t $IMAGE_JAVA ./service-java
    - az acr login --name $ACR_NAME
    - docker push $IMAGE_PYTHON
    - docker push $IMAGE_JAVA
    - echo "üê≥ Images Docker pouss√©es vers ACR."

    # üîÑ D√©ploiement sur Azure App Service
    - az webapp config container set --name mon-app-python-63731 --resource-group rg-microservices-app --docker-custom-image-name $IMAGE_PYTHON
    - az webapp config container set --name mon-app-java-63731 --resource-group rg-microservices-app --docker-custom-image-name $IMAGE_JAVA
    - echo "üöÄ D√©ploiement termin√©."
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
